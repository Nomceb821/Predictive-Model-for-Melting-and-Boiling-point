import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv(r'C:\Users\lenovo\Desktop\Chemistry\hydrocarbons.csv')

#REMOVE COLUMNS YOU DO NOT NEED
data = data.drop(['Flash point', 'Autoignition temp', 'IUPAC name'], axis = 1)

#DATA CLEANING
#REMOVE DUPLICATES, NULL VALUES, AND EMPTY ROWS 
data.replace('-', np.nan, inplace=True) # replacing rows that have "-" with null

data.dropna(inplace = True) # removing null values

data.drop_duplicates(inplace = True) # removing duplicates

#print(data.to_string()) 
from rdkit import Chem
from rdkit.Chem import Descriptors
from rdkit.Chem.Lipinski import NumAromaticRings

#Use descriptors to find molecular weight, aromatic binds, aromatic rings
def compute_descriptors(smiles):
    mol = Chem.MolFromSmiles(smiles)
    descriptors = {
        'MolWt': Descriptors.MolWt(mol),
        'Aromatic bonds': sum(1 for bond in mol.GetBonds() if bond.GetIsAromatic()),
        'Aromatic Rings': NumAromaticRings(mol),               
        'LogP': Descriptors.MolLogP(mol)
    }
    return descriptors
   
descriptors_list = data['smiles'].apply(compute_descriptors)
descriptors_df = pd.DataFrame(descriptors_list.tolist())
#print(descriptors_df.to_string())

#CONCANATING DESCRIPTORS AND ORIGINAL DATA 
df_new = pd.concat([data, descriptors_df], axis = 1)
df_new.dropna(inplace= True)
print(df_new)

#FEATURES AND TARGET
X = df_new[['MolWt', 'Aromatic Rings','Density', 'Aromatic bonds', 'LogP']]
y_melting = df_new['Melting point']
y_boiling = df_new['Boiling point']
#print(y)
#print(df_new.to_string())

#USING MELTING POINT 
# Split the data into training and testing sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train_melting, y_test_melting = train_test_split(X, y_melting, test_size = 0.2, random_state= 42)

#EVALUATION
from sklearn.ensemble import RandomForestRegressor

#fit the model
rfr_model_melting = RandomForestRegressor(n_estimators = 100, random_state = 42)
rfr_model_melting.fit(X_train, y_train_melting_imputed)
rfr_pred_melting = rfr_model_melting.predict(X_test)

from sklearn.metrics import mean_absolute_error, r2_score

rfr_mse_melting = mean_absolute_error(y_test_melting, rfr_pred_melting)
print(f'Mean squared absolute error of melting point {rfr_mse_melting:.2f}')

rfr_melting_r2 = r2_score(y_test_melting, rfr_pred_melting)
print(f'Rsquared of melting point {rfr_melting_r2:.2f}')

#BOILING POINT
# Split the data into training and testing sets
X_train, X_test, y_train_boiling, y_test_boiling = train_test_split(X, y_boiling, test_size = 0.2, random_state= 42)

#EVALUATION
# Fit the model 
rfr_model_boiling = RandomForestRegressor(n_estimators = 100, random_state = 42)
rfr_model_boiling.fit(X_train, y_train_boiling)
rfr_pred_boiling = rfr_model_boiling.predict(X_test)

rfr_mae_boiling = mean_absolute_error(y_test_boiling, rfr_pred_boiling)
print(f'Mean absolute error of boiling point {rfr_mse_boiling:.2f}')

rfr_boiling_r2 = r2_score(y_test_boiling, rfr_pred_boiling)
print(f'Rsquared of boiling point {rfr_boiling_r2:.2f}')














